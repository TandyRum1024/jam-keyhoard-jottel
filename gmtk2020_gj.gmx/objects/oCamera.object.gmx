<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Camera
/// Cam attributes
vx = 0;
vy = 0;
r = 0;
velDamp = 0.9;

// FX
FXShake = 0;
FXShakeDamp = 0.75;

// Follow
followTarget    = noone;
followDistMin   = 32;
followDistMax   = 64;
followVelAcc    = 0.1;
followVelMaxX   = 4;
followVelMaxY   = 16;
followLookaheadVelMinX  = 3;
followLookaheadVelMinY  = 6;
followLookaheadVelMaxX  = 4;
followLookaheadVelMaxY  = 8;
followLookaheadDistMaxX = 128;
followLookaheadDistMaxY = 32;
// followLookaheadDistX    = 0;
// followLookaheadDistY    = 0;
// followLookaheadDistLerpFactor = 0.025;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update camera

/// Update following behaviour
if (instance_exists(followTarget))
{
    var _targetx = followTarget.x; // + clamp((abs(followTarget.vx) - followLookaheadVelMinX) / (followLookaheadVelMaxX - followLookaheadVelMinX), 0, 1) * followLookaheadDistMaxX * sign(followTarget.vx);
    var _targety = followTarget.y; // + clamp((abs(followTarget.vy) - followLookaheadVelMinY) / (followLookaheadVelMaxY - followLookaheadVelMinY), 0, 1) * followLookaheadDistMaxY * sign(followTarget.vy);
    
    var _dx     = _targetx - x, _dy = _targety - y;
    var _dist   = sqrt(_dx * _dx + _dy * _dy);
    if (_dist &gt; followDistMin)
    {
        // Apply acceleration &amp; clamp the velocity
        vx += clamp(abs(_dx) / followDistMax, 0.0, 1.0) * followVelAcc * sign(_dx);
        vy += clamp(abs(_dy) / followDistMax, 0.0, 1.0) * followVelAcc * sign(_dy);
        vx = clamp(vx, -followVelMaxX, followVelMaxX);
        vy = clamp(vy, -followVelMaxY, followVelMaxY);
        
        // Clip camera's position to bounds
        x = clamp(x, _targetx - followDistMax, _targetx + followDistMax);
        y = clamp(y, _targety - followDistMax, _targety + followDistMax);
    }
    
    // Update look-ahead
    /*
    var _disttargetx = 0;
    var _disttargety = 0;
    if (abs(followTarget.vx) &gt; followLookaheadVelMinX) _disttargetx = followLookaheadDistMaxX * sign(_dx);
    if (abs(followTarget.vy) &gt; followLookaheadVelMinY) _disttargety = followLookaheadDistMaxY * sign(_dy);
    followLookaheadDistX = lerp(followLookaheadDistX, _disttargetx, followLookaheadDistLerpFactor);
    followLookaheadDistY = lerp(followLookaheadDistY, _disttargety, followLookaheadDistLerpFactor);
    */
}

/// Update position
x += vx;
y += vy;
vx *= velDamp;
vy *= velDamp;

FXShake *= FXShakeDamp;

/// Set view
var _gamew = global.gameWid;
var _gameh = global.gameHei;
view_wview[view_current] = _gamew;
view_hview[view_current] = _gameh;

// Clamp camera's position to current room's bounds
view_xview[view_current] = floor(median(0, x - _gamew * 0.5, room_width - _gamew) + random_range(-FXShake, FXShake));
view_yview[view_current] = floor(median(0, y - _gameh * 0.5, room_height - _gameh) + random_range(-FXShake, FXShake));

view_angle[view_current] = r;

// view_xview[view_current] = median(view_xview[view_current] - , x);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
