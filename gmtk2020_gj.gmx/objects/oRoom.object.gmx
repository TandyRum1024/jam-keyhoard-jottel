<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Room metadata
/// Is room prepared everything before being playable?
roomReady = false;

/// Room's name &amp; description
title       = "ROOM F-XV-3E";
subtitle    = "pain hamburger";

/// Room entity index
entityPickupIndex = 0;
entityTeleportIndex = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Begin room
debug_log("oROOM &gt; ROOM_START");

/// Request spawning necessary objects to control object
with (oKNT)
{
    event_user(0);
}

/// Generate tiles
var _tiles = tile_get_ids_at_depth(1000001);
for (var i=0; i&lt;array_length_1d(_tiles); i++)
{
    var _tile = _tiles[@ i];
    var _tilex = tile_get_x(_tile);
    var _tiley = tile_get_y(_tile);
    instance_create(_tilex, _tiley, oTile);
}

/// Handle room events
// debug_log("ROOM ROOM_START &gt; READING EVENTS FOR ", room_get_name(room));
var _events = roomevents_get();
if (_events != undefined)
{
    for (var i=0; i&lt;ds_list_size(_events); i++)
    {
        var _ev = _events[| i];
        // debug_log("ROOM ROOM_START &gt; EVENT : ", _ev);
        switch (_ev[@ 0])
        {
            case eEVENT.DELETE_OBJ:
                // Delete [object, x, y]
                var _obj = _ev[@ 1], _x = _ev[@ 2], _y = _ev[@ 3];
                var _inst = instance_position(_x, _y, _obj);
                if (instance_exists(_inst))
                {
                    // Destroy specific instance
                    instance_destroy(_inst);
                }
                else
                {
                    // Destroy ALL instance of object
                    instance_destroy(_obj);
                }
                break;
                
            case eEVENT.CREATE_OBJ:
                // Crate [object, x, y]
                var _obj = _ev[@ 1], _x = _ev[@ 2], _y = _ev[@ 3];
                instance_create(_x, _y, _obj);
                break;
                
            case eEVENT.SWAP_PICKUP_ITEM:
                // Swap [itemtype, x, y]
                var _type = _ev[@ 1], _x = _ev[@ 2], _y = _ev[@ 3];
                // debug_log("oROOM - PICKUP SWAP ROOM EVENT [", _x, ", ", _y, "]");
                
                var _inst = instance_position(_x, _y, oPickup);
                if (instance_exists(_inst))
                {
                    // debug_log(" &gt; OG PICKUP ITEM : ", _inst.type, " | SWAPPED ITEM : ", _type);
                    _inst.type = _type;
                }
                // else
                // {
                //     debug_log(" &gt; NO SWAPPABLE ITEM FOUND :( [", _inst, "]");
                // }
                break;
                
            case eEVENT.UNLOCK_TP:
                // Unlock teleport in the room
                with (oTeleport)
                {
                    active = true;
                }
                break;
                
            case eEVENT.UNLOCK_ITEM:
                // Unlock item [x, y]
                var _x = _ev[@ 1], _y = _ev[@ 2];
                
                // Unlock item to make it available to relocate
                var _inst = instance_position(_x, _y, oPickup);
                if (instance_exists(_inst))
                {
                    // debug_log(" &gt; UNLOCKING ITEM : ", _inst.type);
                    _inst.unlocked = true;
                }
                // else
                // {
                //     debug_log(" &gt; NO UNLOCKABLE ITEM FOUND :( [", _inst, "]");
                // }
                break;
        }
    }
}

/// Ready up for gameplay
roomReady = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
