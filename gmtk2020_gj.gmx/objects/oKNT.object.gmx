<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// singleton check
if (!singleton_update())
    exit;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// decl vars
debug_log("oKNT &gt; DECL VARS...");

/// FSM
fsm_init();
fsm_add_state("default", knt_state_normal);
fsm_add_state("init", knt_state_init);
fsm_add_state("title", knt_state_title);
fsm_add_state("intro", knt_state_intro);
fsm_add_state("ending", knt_state_ending);
fsm_add_state("item_get", knt_state_item_get);
fsm_add_state("item_assign", knt_state_item_assign);
fsm_add_state("hub_respawn", knt_state_hub_respawn);
fsm_add_state("objective_powercell_deposit", knt_state_powercell_deposit);
fsm_add_state("teleport_select", knt_state_teleport_select);
fsm_add_state("teleport", knt_state_teleport);
fsm_add_state("room_move", knt_state_room_move);
fsm_add_state("room_enter", knt_state_room_enter);
fsm_set("init");

/// Required objects
event_user(0);

/// Set font
draw_set_font(fntGame);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// SFX
sfx_init();

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Game resolution
global.gameWid = 400;
global.gameHei = 300;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Game visual
global.postprocess = true;
global.surfPostprocess = surface_create(window_get_width(), window_get_height());

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// state revelant vars
/// Intro cutscene state
introCutsceneIdx = 0;
introCutsceneWaitFrames = 30;
introCutsceneReady = false;

/// Ingame state
// Room transition
ingameRoomTransitionRequest = false;
ingameRoomTransitionSource  = rm_hub;
ingameRoomTransitionDest    = rm_hub;
ingameRoomTransitionDoorID  = 0;

// Item pickup
ingameItemPickupRequest = false;
ingameItemPickupInst    = noone;
ingameItemPickupType    = eITEM.NONE;

// Item assign
ingameItemAssignItemType    = eITEM.NONE;
ingameItemAssignSelected    = false; // key slot selected?
ingameItemAssignSelectedIdx = 0; // index of key slot that has been selected

// Powercell select
ingamePowercellDepositRequest       = false;
ingamePowercellDepositSelectedIdx   = 0;

// Ending
ingameEndingRequest = false;

// Teleport select
ingameTeleportSelectRequest       = false;
ingameTeleportSelectRequestInst   = noone;
ingameTeleportSelectIdx     = 0;

// Teleport
ingameTeleportDest = rm_hub;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// update postprocess surface
if ((!surface_exists(global.surfPostprocess) || (surface_get_width(global.surfPostprocess) != window_get_width() || surface_get_height(global.surfPostprocess) != window_get_height())) &amp;&amp;
    (window_get_width() != 0 &amp;&amp; window_get_height() != 0))
{
    if (surface_exists(global.surfPostprocess))
        surface_free(global.surfPostprocess);
    global.surfPostprocess = surface_create(window_get_width(), window_get_height());
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update FSM
fsm_update();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spawn necessary objects
if (!instance_exists(oGamevars))
    instance_create(0, 0, oGamevars);
    
if (!instance_exists(oUI))
    instance_create(0, 0, oUI);

if (!instance_exists(oCamera))
{
    instance_create(0, 0, oCamera);
    if (instance_exists(oPlayer))
    {
        with (oCamera)
        {
            followTarget = oPlayer;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Transfer application surface's contents to postprocessing surface
surface_set_target(global.surfPostprocess);
// clear
draw_clear_alpha(c_black, 1.0);
draw_surface_stretched(application_surface, 0, 0, surface_get_width(global.surfPostprocess), surface_get_height(global.surfPostprocess));
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// End catching the GUI draws and draw the postprocessing surface

surface_reset_target();

if (global.postprocess)
{
    /// draw with filters applied
    // Filter : create temp. downscale / blur surface
    var _surfw = surface_get_width(global.surfPostprocess);
    var _surfh = surface_get_height(global.surfPostprocess);
    var _smallsurf = surface_create(_surfw * 0.1, _surfh * 0.1);
    texture_set_interpolation(true);
    surface_set_target(_smallsurf);
    draw_clear_alpha(0, 0);
    draw_surface_stretched(global.surfPostprocess, 0, 0, surface_get_width(_smallsurf), surface_get_height(_smallsurf));
    surface_reset_target();
    
    var _noise      = sprite_get_texture(texBluenoise, 0);
    var _rainbow    = sprite_get_texture(texRainbowTable, 0);
    
    shader_set(shd_postprocessing);
    texture_set_stage(shader_get_sampler_index(shd_postprocessing, "uTexDownscaledScreen"), surface_get_texture(_smallsurf));
    texture_set_stage(shader_get_sampler_index(shd_postprocessing, "uTexBluenoise"), _noise);
    texture_set_stage(shader_get_sampler_index(shd_postprocessing, "uTexRainbow"), _rainbow);
    shader_set_uniform_f(shader_get_uniform(shd_postprocessing, "uTime"), current_time * 0.001);
    shader_set_uniform_f(shader_get_uniform(shd_postprocessing, "uScreenTexelSize"), 1 / _surfw, 1 / _surfh);
    shader_set_uniform_f(shader_get_uniform(shd_postprocessing, "uBluenoiseTexelSize"), texture_get_texel_width(_noise), texture_get_texel_height(_noise));
    draw_surface_stretched(global.surfPostprocess, 0, 0, window_get_width(), window_get_height());
    shader_reset();
    texture_set_interpolation(false);
    
    // Free temp. surfaces
    surface_free(_smallsurf);
}
else
{
    /// draw w/o shaders applied
    draw_surface_stretched(global.surfPostprocess, 0, 0, window_get_width(), window_get_height());
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="74">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Begin catching the GUI draws
surface_set_target(global.surfPostprocess);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Manually clear the application surface
surface_set_target(application_surface);
draw_clear_alpha(0, 0);
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
