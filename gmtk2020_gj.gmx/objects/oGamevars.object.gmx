<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gameplay const. variables : Singleton check
if (!singleton_update())
    exit;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gameplay settings
/// SFX
sfx_init();

/// Misc. / Accesibility
miscUIFlicker = 0.3;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gameplay const. variables

/// Enum : inventory data
enum eINV
{
    AVAILABLE = 0,
    ITEM
}

/// Enum : item type
enum eITEM
{
    NONE = 0,
    UPGRADE_MOBILITY,
    UPGRADE_JUMP,
    UPGRADE_KICK,
    UPGRADE_SPRINT,
    UPGRADE_WEAPON,
    UPGRADE_HP,
    UPGRADE_KEY_UNLOCK,
    ITEM_POWERCELL,
    MISC
}

/// Enum : teleport
enum eTP
{
    NAME = 0,
    ROOM
}

/// Enum : room event
enum eEVENT
{
    DELETE_OBJ = 0, // Delete [object, x, y]
    CREATE_OBJ, // Crate [object, x, y]
    SWAP_PICKUP_ITEM, // Swap [itemtype, x, y]
    UNLOCK_TP // Unlock teleport in the room
}

/// Item metadata
// Strings : Name &amp; description &amp; short function desc.
itemStr = -1;
itemStr[eITEM.UPGRADE_MOBILITY]     = makearray("MOBILITY I : MOVEMENT", "A pair of functioning bionic legs.#I can properly move now!", "IMPROVES MOVEMENT!");
itemStr[eITEM.UPGRADE_JUMP]         = makearray("MOBILITY II : JUMP", "Good, this motor enhancement upgrade for my legs is all I need for some extreme jumpin'.#I can jump properly now!", "ENABLES [JUMP]!#PRESS THE ASSIGNED INPUT TO JUMP");
itemStr[eITEM.UPGRADE_SPRINT]       = makearray("MOBILITY III : SPRINTING", "A fine cuppa' joe that's gonna' aid my sprinting.#Best part of running up is this bean juice in your cup.#Anywho; I can sprint again.", "ENABLES [SPRINT]!#HOLD DOWN THE ASSIGNED INPUT TO SPRINT");
itemStr[eITEM.UPGRADE_KICK]         = makearray("KICKING BOOTS", "A pair of trusty boots that I've lost a long time ago!#This comes with a brief yet effective manual on how to kick with style.", "ENABLES [KICK]!#USE [JUMP] AGAIN IN MIDAIR TO KICK");
itemStr[eITEM.UPGRADE_WEAPON]       = makearray("EMITTER MV45", "A fairly high-tech energy-based weapon that is fairly lethal...#Time to emit some energy, yo.", "ENABLES [SHOOT]!#HOLD DOWN AND RELASE THE ASSIGNED INPUT TO SHOOT");
itemStr[eITEM.UPGRADE_HP]           = makearray("HP CANISTER", "Wow, blood.", "INCREASES MAXIMUM HP BY 5!#(BUT ONLY WHEN THE CANISTER IS ASSIGNED TO)");
itemStr[eITEM.UPGRADE_KEY_UNLOCK]   = makearray("SPARE KEY SLOT", "A plastic keyboard key with mechanical switch attached to it..#Probably belongs to some other computer's keyboard, but whatever -- it's mine now, thankyouverymuch.", "EXPANDED KEY SLOTS!#(PERMANENT!!)");
itemStr[eITEM.ITEM_POWERCELL]       = makearray("POWER CANISTER", "This thing not only provides power for the ship,#But it also contains various nanotechwhatevers that will aid the repair.", "ITEM, BRING IT TO THE HUB!");
itemStr[eITEM.MISC]                 = makearray("ITEM", "Alan please add details", "MISC. ITEM");
itemStr[eITEM.NONE]                 = makearray("NOTHING", "Ha, absolutely nothing.", "ABS(NOTHING)");

// Icon : display icon sprite index
itemIcon = -1;
itemIcon[eITEM.UPGRADE_MOBILITY]    = eITEM.UPGRADE_MOBILITY;
itemIcon[eITEM.UPGRADE_JUMP]        = eITEM.UPGRADE_JUMP;
itemIcon[eITEM.UPGRADE_SPRINT]      = eITEM.UPGRADE_SPRINT;
itemIcon[eITEM.UPGRADE_KICK]        = eITEM.UPGRADE_KICK;
itemIcon[eITEM.UPGRADE_WEAPON]      = eITEM.UPGRADE_WEAPON;
itemIcon[eITEM.UPGRADE_HP]          = eITEM.UPGRADE_HP;
itemIcon[eITEM.UPGRADE_KEY_UNLOCK]  = eITEM.UPGRADE_KEY_UNLOCK;
itemIcon[eITEM.ITEM_POWERCELL]      = eITEM.ITEM_POWERCELL;
itemIcon[eITEM.MISC]                = eITEM.MISC;
itemIcon[eITEM.NONE]                = eITEM.NONE;

// Health item : attributes
itemHealthIncreaseAmount = 5;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Key slot &amp; inventory system
/// List of inventory keys
/*
invSlots = ds_list_create();
inv_key_add(ord("A"), false, "A");
inv_key_add(ord("S"), false, "S");
inv_key_add(ord("Z"), true, "Z");
inv_key_add(ord("X"), true, "X");
inv_key_add(vk_shift, false, "SHIFT");

// inv_key_add(ord("D"), false, "D");
// inv_key_add(ord("F"), false, "F");
// inv_key_add(ord("C"), false, "C");
// inv_key_add(ord("V"), false, "V");

/// Table of keys unlocking on each level
invKeysUnlock = makearray(
    makearray(ord("Z"), ord("X")),
    makearray(vk_shift),
    makearray(ord("A")),
    makearray(ord("S"))
    // makearray(ord("C"), ord("V")),
    // makearray(ord("D"), ord("F")),
    );
invKeysLevel = 0;

/// Inventory that tracks all of the items
invItems = ds_list_create();
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Game vars &amp; objective
/// Game objective
progress    = 0;
progressMax = 10;

/// Game begin date
playtimeBeginDate = date_current_datetime();

/// Game play time (in secs)
playtimeSecs = 0;
playtimeSecsMod = 0;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Teleporter system
/// List of available teleports
teleportList = ds_list_create();

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Room events
/// Map that stores each room's "events" such as item obtain, remove object, spawn object etc...
roomEvents = ds_map_create();

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// UI Animation
/// Item get
animUIItemGetWaitFrames = room_speed * 0.5;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player Animation

/// Move
animPlrMoveVelMin       = 0.5; // Player's minimum velocity required to switch to this state
animPlrMoveUnit         = 1 / 32; // bounce frequency / movement unit
animPlrMoveOscFreq      = animPlrMoveUnit * 2 * pi; // bounce frequency / movement unit
animPlrMoveBounceWeight = 2.0;
animPlrMoveBounceAmp    = 1;
animPlrMoveWiggleAmp    = 2;

/// Jump
animPlrJumpMaxVel   = 4; // maximum velocity used for calculating sprite's tilt effect
animPlrJumpTiltAmp  = 16;
animPlrJumpSqueezeFrames = 20; // squeeze effect duration
animPlrJumpSqueezeAmp    = 0.4; // squeeze effect amplitude (0~1)
animPlrJumpSqueezeWeight = 3.0;

/// Kick
animPlrKickWindupFrames     = 6; // duration to show wind-up animation
animPlrKickSqueezeFrames    = 4; // duration of squeeze effect
animPlrKickSqueezeAmp       = 0.5;
animPlrKickSqueezeWeight    = 4.0;
animPlrKickTiltAmp          = 8;
animPlrKickKnockbackShakeAmp    = 8; // amplitude of knockback shake
animPlrKickKnockbackShakeFrames = 8; // duration of knockback shake
animPlrKickKnockbackShakeWeight = 3.0;

/// Hurt
animPlrHurtWeight   = 3.0;
animPlrHurtShakeAmp = 8;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Enemy Animation
/// Move
animEnemyMoveOscFreq    = 1 / 60 * pi;
animEnemyMoveSqueezeAmp = 0.1;

/// Windup
animEnemyWindupShakeAmp = 4;
animEnemyWindupWeight   = 3.0;

/// Attack
animEnemyAttackSqueezeAmp   = 0.25;
animEnemyAttackShakeAmp     = 8;
animEnemyAttackWeight       = 3.0;

/// Hurt
animEnemyHurtFrames     = 8;
animEnemyHurtShakeAmp   = 8;
animEnemyHurtWeight     = 4.0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Free allocated memories
if (objectInitialized)
{
    /// Key slot system
    // if (ds_exists(invSlots, ds_type_list))
    //     ds_list_destroy(invSlots);
    
    /// Teleporter system
    if (ds_exists(teleportList, ds_type_list))
        ds_list_destroy(teleportList);
    
    /// Room events
    if (ds_exists(roomEvents, ds_type_map))
        ds_map_destroy(roomEvents);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update key slots upgrade status
event_user(0);
/*
invKeysLevel = clamp(invKeysLevel, 0, array_length_1d(invKeysUnlock) - 1);
for (var i=0; i&lt;=invKeysLevel; i++)
{
    var _unlocks = invKeysUnlock[@ i];
    for (var j=0; j&lt;array_length_1d(_unlocks); j++)
    {
        var _keycode = _unlocks[@ j];
        debug_log("unlocking [", chr(_keycode), " / ", _keycode, "]...");
        inv_key_set_available(_keycode, true);
    }
}
*/
debug_log("oGAMEVARS USER1&gt; THIS METHOD IS NOT USED PLEASE");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset key slots upgrade status
/*
for (var i=0; i&lt;ds_list_size(invSlots); i++)
{
    var _keydata = invSlots[| i];
    _keydata[@ eINVKEY.AVAILABLE] = false;
}
*/
debug_log("oGAMEVARS USER0&gt; THIS METHOD IS NOT USED PLEASE");
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
